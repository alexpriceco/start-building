
// Animation easing ðŸ’ƒðŸ•º so smoove
@mixin ease($ms) {
    -webkit-transition: all $ms cubic-bezier(0.420, 0.000, 0.580, 1.000);
       -moz-transition: all $ms cubic-bezier(0.420, 0.000, 0.580, 1.000);
            transition: all $ms cubic-bezier(0.420, 0.000, 0.580, 1.000);
}

@mixin transition-delay($ms) {
    -webkit-transition-delay: $ms;
       -moz-transition-delay: $ms;
            transition-delay: $ms;
}

@mixin box-shadow($top, $left, $blur, $spread, $color) {
  -webkit-box-shadow: $top $left $blur $spread $color;
  -moz-box-shadow: $top $left $blur $spread $color;
  box-shadow: $top $left $blur $spread $color;
}

@mixin animation-delay($s) {
  -moz-animation-delay: $s;
  -webkit-animation-delay: $s;
  animation-delay: $s;
}

@mixin keyframes($name) {
  @-moz-keyframes #{$name} { @content; }
  @-webkit-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }

  .#{$name} {
    animation-name: #{$name};
    -webkit-animation-name: #{$name};
  }
}

@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}

@mixin transition($rules) {
  -webkit-transition: $rules;
     -moz-transition: $rules;
          transition: $rules;
}

@mixin animate($s) {
  -webkit-animation-duration: $s;
  animation-duration: $s;
  -webkit-animation-fill-mode: both;
  animation-fill-mode: both;
}

@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
     -moz-transform: translate3d($x, $y, $z);
          transform: translate3d($x, $y, $z);
}

// Linear Gradient by Chris Eppstein
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
     / nth($conversion-factors, index($convertable-units, unit($value)))
     * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

// Usage:
// @include linear-gradient(42deg, #B58234 0%, #D2B545 50%, #FFFFFF 100%)
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
